서버
1. 서버에 처음 접속시 newplayer 변수에 joingame이라는 메서드를 통해 플레이어 생성
2. 클라이언트에게 클라 자신의 id값을 넘겨줌
3. 서버는 전체 유저 각각에게 정보를 넘겨줌
4. 서버는 전체 유저들에게 새로운 유저의 정보를 뿌림
5. 서버는 특정 클라이언트에게 위치정보를 받아 업데이트 해줌

클라이언트
1. 서버.2에서 해당 클라의 id값을 받음
2. 서버.34에서 만들어진 새로운 유저 메시지를 받아 클라쪽 유저목록에 넣음
3. 


io.to(머시깽이)를 이용해서 그 방의 사람들에게만 전달
io.on('connection', (socket)=> {
        console.log("SOCKETIO connection EVENT: ", socket.id, " client connected");

        socket.on('joinRoom', function(msg) {     // joinRoom을 클라이언트가 emit 했을 시
            let roomName = msg;
            socket.join(roomName);    // 클라이언트를 msg에 적힌 room으로 참여 시킴
        });

        socket.on('chatting', function(msg) {       // 클라이언트가 채팅 내용을 보냈을 시
            // 전달한 roomName에 존재하는 소켓 전부에게 broadcast라는 이벤트 emit
            io.to(msg.roomName).emit('broadcast', msg.msg); 
        })
    })

오늘은 matchtimeover까지 햇읍니다.

matchtimeover 하다가 말음
해야할거 
1. 체크된 유저가 들어간 룸 배열의 정보가 몇개 들어가있는지 체크해서 그 유저들 위에 room 명령어로 한꺼번에 emit하기